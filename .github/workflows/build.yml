name: build dictionaries

on:
  push:
    branches:
      - '*'
  schedule:
    - cron: "0 0 15 * *"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        lemma_lang: ["de", "en", "es", "fr", "ko", "ja", "zh"]
        gloss_lang: ["de", "en", "fr", "zh"]
    env:
      FILENAME: ${{ matrix.lemma_lang }}-${{ matrix.gloss_lang }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - run: python -m pip install lxml pyglossary python-idzip requests
      - name: Get kaikki date
        id: kaikki-date
        run: |
          echo "date=$(python kaikki.py ${{ matrix.gloss_lang }})" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4  # 10G limit
        id: cache
        with:
          path: ./*.jsonl
          key: ${{ matrix.gloss_lang }}-${{ steps.kaikki-date.outputs.date }}
      - if: steps.cache.outputs.cache-hit != 'true' && matrix.gloss_lang == 'en'
        run: |
          wget -nv -O en.jsonl.gz https://kaikki.org/dictionary/raw-wiktextract-data.jsonl.gz
          pigz -d en.jsonl.gz
      - if: steps.cache.outputs.cache-hit != 'true' && matrix.gloss_lang != 'en'
        run: |
          wget -nv -O ${{ matrix.gloss_lang }}.jsonl.gz https://kaikki.org/${{ matrix.gloss_lang }}wiktionary/raw-wiktextract-data.jsonl.gz
          pigz -d ${{ matrix.gloss_lang }}.jsonl.gz
      - run: curl -fsSL https://github.com/01mf02/jaq/releases/latest/download/jaq-$(uname -m)-unknown-linux-musl -o jaq && chmod +x jaq
      - if: matrix.gloss_lang == 'en'
        run: ./jaq -c --arg lang_code ${{ matrix.lemma_lang }} -f en.jq en.jsonl > ${{ env.FILENAME }}.jsonl
      - if: matrix.gloss_lang != 'en'
        run: ./jaq -c --arg lang_code ${{ matrix.lemma_lang }} -f non_en.jq ${{ matrix.gloss_lang }}.jsonl > ${{ env.FILENAME }}.jsonl
      - run: |
          python create_stardict_textual.py ${{ env.FILENAME }}.jsonl
          rm ${{ env.FILENAME }}.jsonl
          mkdir ${{ env.FILENAME }}
          pyglossary ${{ env.FILENAME }}.xml ${{ env.FILENAME }} --read-format=StardictTextual --write-format=StardictMergeSyns
          rm ${{ env.FILENAME }}.xml
          tar --zstd -cf ${{ env.FILENAME }}.tar.zst ${{ env.FILENAME }}
      - name: Get date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME }}-${{ steps.get-date.outputs.date }}
          if-no-files-found: error
          path: ./*.tar.zst
